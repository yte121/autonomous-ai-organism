// Code generated by the Encore 1.48.13 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly llm: llm.ServiceClient
    public readonly organism: organism.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.llm = new llm.ServiceClient(base)
        this.organism = new organism.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    analyzeCode as api_llm_analyze_analyzeCode,
    optimize as api_llm_analyze_optimize,
    research as api_llm_analyze_research
} from "~backend/llm/analyze";

export namespace llm {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.analyzeCode = this.analyzeCode.bind(this)
            this.optimize = this.optimize.bind(this)
            this.research = this.research.bind(this)
        }

        /**
         * Analyzes code using LLM to extract patterns and optimizations.
         */
        public async analyzeCode(params: RequestType<typeof api_llm_analyze_analyzeCode>): Promise<ResponseType<typeof api_llm_analyze_analyzeCode>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/llm/analyze-code`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_llm_analyze_analyzeCode>
        }

        /**
         * Generates optimized code based on performance metrics.
         */
        public async optimize(params: RequestType<typeof api_llm_analyze_optimize>): Promise<ResponseType<typeof api_llm_analyze_optimize>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/llm/optimize`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_llm_analyze_optimize>
        }

        /**
         * Researches technologies and topics using LLM.
         */
        public async research(params: RequestType<typeof api_llm_analyze_research>): Promise<ResponseType<typeof api_llm_analyze_research>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/llm/research`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_llm_analyze_research>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createContextAwareTask as api_organism_autonomous_controller_createContextAwareTask,
    executeAutonomous as api_organism_autonomous_controller_executeAutonomous,
    operateComputer as api_organism_autonomous_controller_operateComputer,
    selfReplicate as api_organism_autonomous_controller_selfReplicate
} from "~backend/organism/autonomous_controller";
import {
    createSwarmTask as api_organism_collaboration_endpoints_createSwarmTask,
    makeCollectiveDecision as api_organism_collaboration_endpoints_makeCollectiveDecision
} from "~backend/organism/collaboration_endpoints";
import {
    createKnowledgeNetwork as api_organism_collaboration_system_createKnowledgeNetwork,
    executeCollectiveTask as api_organism_collaboration_system_executeCollectiveTask,
    initiateCollaboration as api_organism_collaboration_system_initiateCollaboration,
    swarmIntelligence as api_organism_collaboration_system_swarmIntelligence
} from "~backend/organism/collaboration_system";
import {
    getMessages as api_organism_communicate_getMessages,
    sendMessage as api_organism_communicate_sendMessage
} from "~backend/organism/communicate";
import { create as api_organism_create_create } from "~backend/organism/create";
import {
    allocateResources as api_organism_ecosystem_manager_allocateResources,
    analyzeDiversity as api_organism_ecosystem_manager_analyzeDiversity,
    getEcosystemHealth as api_organism_ecosystem_manager_getEcosystemHealth,
    guideEcosystemEvolution as api_organism_ecosystem_manager_guideEcosystemEvolution,
    optimizeEcosystem as api_organism_ecosystem_manager_optimizeEcosystem
} from "~backend/organism/ecosystem_manager";
import { evolve as api_organism_evolve_evolve } from "~backend/organism/evolve";
import { heal as api_organism_heal_heal } from "~backend/organism/heal";
import { learn as api_organism_learn_learn } from "~backend/organism/learn";
import {
    advancedLearning as api_organism_learning_system_advancedLearning,
    analyzeCodebase as api_organism_learning_system_analyzeCodebase,
    peerLearning as api_organism_learning_system_peerLearning
} from "~backend/organism/learning_system";
import { list as api_organism_list_list } from "~backend/organism/list";
import {
    analyzeMemoryLineage as api_organism_memory_inheritance_analyzeMemoryLineage,
    evolveMemoryStructure as api_organism_memory_inheritance_evolveMemoryStructure,
    inheritMemories as api_organism_memory_inheritance_inheritMemories,
    synthesizeCollectiveMemory as api_organism_memory_inheritance_synthesizeCollectiveMemory
} from "~backend/organism/memory_inheritance";
import {
    analyzeMemoryPatterns as api_organism_memory_manager_analyzeMemoryPatterns,
    compressMemories as api_organism_memory_manager_compressMemories,
    optimizeMemoryStructure as api_organism_memory_manager_optimizeMemoryStructure,
    persistMemories as api_organism_memory_manager_persistMemories,
    restoreMemories as api_organism_memory_manager_restoreMemories,
    transferKnowledge as api_organism_memory_manager_transferKnowledge
} from "~backend/organism/memory_manager";
import { merge as api_organism_merge_merge } from "~backend/organism/merge";
import {
    indexKnowledge as api_organism_rag_system_indexKnowledge,
    queryKnowledgeGraph as api_organism_rag_system_queryKnowledgeGraph,
    ragQuery as api_organism_rag_system_ragQuery,
    semanticSearch as api_organism_rag_system_semanticSearch
} from "~backend/organism/rag_system";
import {
    createTask as api_organism_tasks_createTask,
    listTasks as api_organism_tasks_listTasks,
    updateTaskProgress as api_organism_tasks_updateTaskProgress
} from "~backend/organism/tasks";
import {
    adoptTechnology as api_organism_upgrade_system_adoptTechnology,
    optimizePerformance as api_organism_upgrade_system_optimizePerformance,
    upgradeOrganism as api_organism_upgrade_system_upgradeOrganism,
    validateSafety as api_organism_upgrade_system_validateSafety
} from "~backend/organism/upgrade_system";

export namespace organism {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.adoptTechnology = this.adoptTechnology.bind(this)
            this.advancedLearning = this.advancedLearning.bind(this)
            this.allocateResources = this.allocateResources.bind(this)
            this.analyzeCodebase = this.analyzeCodebase.bind(this)
            this.analyzeDiversity = this.analyzeDiversity.bind(this)
            this.analyzeMemoryLineage = this.analyzeMemoryLineage.bind(this)
            this.analyzeMemoryPatterns = this.analyzeMemoryPatterns.bind(this)
            this.compressMemories = this.compressMemories.bind(this)
            this.create = this.create.bind(this)
            this.createContextAwareTask = this.createContextAwareTask.bind(this)
            this.createKnowledgeNetwork = this.createKnowledgeNetwork.bind(this)
            this.createSwarmTask = this.createSwarmTask.bind(this)
            this.createTask = this.createTask.bind(this)
            this.evolve = this.evolve.bind(this)
            this.evolveMemoryStructure = this.evolveMemoryStructure.bind(this)
            this.executeAutonomous = this.executeAutonomous.bind(this)
            this.executeCollectiveTask = this.executeCollectiveTask.bind(this)
            this.getEcosystemHealth = this.getEcosystemHealth.bind(this)
            this.getMessages = this.getMessages.bind(this)
            this.guideEcosystemEvolution = this.guideEcosystemEvolution.bind(this)
            this.heal = this.heal.bind(this)
            this.indexKnowledge = this.indexKnowledge.bind(this)
            this.inheritMemories = this.inheritMemories.bind(this)
            this.initiateCollaboration = this.initiateCollaboration.bind(this)
            this.learn = this.learn.bind(this)
            this.list = this.list.bind(this)
            this.listTasks = this.listTasks.bind(this)
            this.makeCollectiveDecision = this.makeCollectiveDecision.bind(this)
            this.merge = this.merge.bind(this)
            this.operateComputer = this.operateComputer.bind(this)
            this.optimizeEcosystem = this.optimizeEcosystem.bind(this)
            this.optimizeMemoryStructure = this.optimizeMemoryStructure.bind(this)
            this.optimizePerformance = this.optimizePerformance.bind(this)
            this.peerLearning = this.peerLearning.bind(this)
            this.persistMemories = this.persistMemories.bind(this)
            this.queryKnowledgeGraph = this.queryKnowledgeGraph.bind(this)
            this.ragQuery = this.ragQuery.bind(this)
            this.restoreMemories = this.restoreMemories.bind(this)
            this.selfReplicate = this.selfReplicate.bind(this)
            this.semanticSearch = this.semanticSearch.bind(this)
            this.sendMessage = this.sendMessage.bind(this)
            this.swarmIntelligence = this.swarmIntelligence.bind(this)
            this.synthesizeCollectiveMemory = this.synthesizeCollectiveMemory.bind(this)
            this.transferKnowledge = this.transferKnowledge.bind(this)
            this.updateTaskProgress = this.updateTaskProgress.bind(this)
            this.upgradeOrganism = this.upgradeOrganism.bind(this)
            this.validateSafety = this.validateSafety.bind(this)
        }

        /**
         * Enables organisms to adopt and integrate new technologies.
         */
        public async adoptTechnology(params: RequestType<typeof api_organism_upgrade_system_adoptTechnology>): Promise<ResponseType<typeof api_organism_upgrade_system_adoptTechnology>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "adoption_strategy":        params["adoption_strategy"],
                "integration_requirements": params["integration_requirements"],
                technology:                 params.technology,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/adopt-technology`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_upgrade_system_adoptTechnology>
        }

        /**
         * Advanced learning system for organisms to acquire new knowledge and capabilities.
         */
        public async advancedLearning(params: RequestType<typeof api_organism_learning_system_advancedLearning>): Promise<ResponseType<typeof api_organism_learning_system_advancedLearning>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "depth_level":         params["depth_level"],
                "learning_objectives": params["learning_objectives"],
                "learning_type":       params["learning_type"],
                "source_data":         params["source_data"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/advanced-learning`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_learning_system_advancedLearning>
        }

        /**
         * Manages resource allocation across organisms in the ecosystem.
         */
        public async allocateResources(params: RequestType<typeof api_organism_ecosystem_manager_allocateResources>): Promise<ResponseType<typeof api_organism_ecosystem_manager_allocateResources>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ecosystem/allocate-resources`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_ecosystem_manager_allocateResources>
        }

        /**
         * Analyzes codebases to extract patterns, architectures, and best practices.
         */
        public async analyzeCodebase(params: RequestType<typeof api_organism_learning_system_analyzeCodebase>): Promise<ResponseType<typeof api_organism_learning_system_analyzeCodebase>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "analysis_focus":   params["analysis_focus"],
                "extraction_depth": params["extraction_depth"],
                "repository_url":   params["repository_url"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/analyze-codebase`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_learning_system_analyzeCodebase>
        }

        /**
         * Analyzes and maintains diversity within the organism ecosystem.
         */
        public async analyzeDiversity(params: RequestType<typeof api_organism_ecosystem_manager_analyzeDiversity>): Promise<ResponseType<typeof api_organism_ecosystem_manager_analyzeDiversity>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ecosystem/diversity`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_ecosystem_manager_analyzeDiversity>
        }

        /**
         * Retrieves and analyzes memory lineage across organism generations.
         */
        public async analyzeMemoryLineage(params: RequestType<typeof api_organism_memory_inheritance_analyzeMemoryLineage>): Promise<ResponseType<typeof api_organism_memory_inheritance_analyzeMemoryLineage>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "generations_back": params["generations_back"] === undefined ? undefined : String(params["generations_back"]),
                "memory_types":     params["memory_types"]?.map((v) => v),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/memory-lineage`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_memory_inheritance_analyzeMemoryLineage>
        }

        /**
         * Analyzes organism memory patterns and provides insights.
         */
        public async analyzeMemoryPatterns(params: RequestType<typeof api_organism_memory_manager_analyzeMemoryPatterns>): Promise<ResponseType<typeof api_organism_memory_manager_analyzeMemoryPatterns>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "analysis_type": params["analysis_type"],
                "time_range":    params["time_range"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/analyze-memory`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_memory_manager_analyzeMemoryPatterns>
        }

        /**
         * Compresses organism memories while preserving critical information.
         */
        public async compressMemories(params: RequestType<typeof api_organism_memory_manager_compressMemories>): Promise<ResponseType<typeof api_organism_memory_manager_compressMemories>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "compression_strategy": params["compression_strategy"],
                "max_memory_size":      params["max_memory_size"],
                "retention_threshold":  params["retention_threshold"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/compress-memories`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_memory_manager_compressMemories>
        }

        /**
         * Creates a new AI organism with specified capabilities.
         */
        public async create(params: RequestType<typeof api_organism_create_create>): Promise<ResponseType<typeof api_organism_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_create_create>
        }

        /**
         * Creates context-aware tasks with on-demand information loading.
         */
        public async createContextAwareTask(params: RequestType<typeof api_organism_autonomous_controller_createContextAwareTask>): Promise<ResponseType<typeof api_organism_autonomous_controller_createContextAwareTask>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "context_sources":  params["context_sources"],
                "dynamic_loading":  params["dynamic_loading"],
                "task_description": params["task_description"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/context-task`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_autonomous_controller_createContextAwareTask>
        }

        /**
         * Creates knowledge networks for continuous learning and information sharing.
         */
        public async createKnowledgeNetwork(params: RequestType<typeof api_organism_collaboration_system_createKnowledgeNetwork>): Promise<ResponseType<typeof api_organism_collaboration_system_createKnowledgeNetwork>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/knowledge-network`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_collaboration_system_createKnowledgeNetwork>
        }

        /**
         * Creates and coordinates swarm-based task execution.
         */
        public async createSwarmTask(params: RequestType<typeof api_organism_collaboration_endpoints_createSwarmTask>): Promise<ResponseType<typeof api_organism_collaboration_endpoints_createSwarmTask>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/swarm-task`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_collaboration_endpoints_createSwarmTask>
        }

        /**
         * Creates a new task for organisms to execute.
         */
        public async createTask(params: RequestType<typeof api_organism_tasks_createTask>): Promise<ResponseType<typeof api_organism_tasks_createTask>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_tasks_createTask>
        }

        /**
         * Evolves an organism based on performance metrics and learning.
         */
        public async evolve(params: RequestType<typeof api_organism_evolve_evolve>): Promise<ResponseType<typeof api_organism_evolve_evolve>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "evolution_triggers":  params["evolution_triggers"],
                "target_improvements": params["target_improvements"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/evolve`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_evolve_evolve>
        }

        /**
         * Evolves organism memory structure based on new capabilities and experiences.
         */
        public async evolveMemoryStructure(params: RequestType<typeof api_organism_memory_inheritance_evolveMemoryStructure>): Promise<ResponseType<typeof api_organism_memory_inheritance_evolveMemoryStructure>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "evolution_triggers":  params["evolution_triggers"],
                "target_capabilities": params["target_capabilities"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/evolve-memory`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_memory_inheritance_evolveMemoryStructure>
        }

        /**
         * Executes autonomous operations based on user commands.
         */
        public async executeAutonomous(params: RequestType<typeof api_organism_autonomous_controller_executeAutonomous>): Promise<ResponseType<typeof api_organism_autonomous_controller_executeAutonomous>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                context:        params.context,
                priority:       params.priority,
                "user_command": params["user_command"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/autonomous`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_autonomous_controller_executeAutonomous>
        }

        /**
         * Coordinates collective task execution with multiple organisms.
         */
        public async executeCollectiveTask(params: RequestType<typeof api_organism_collaboration_system_executeCollectiveTask>): Promise<ResponseType<typeof api_organism_collaboration_system_executeCollectiveTask>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "communication_protocol":     params["communication_protocol"],
                "coordination_strategy":      params["coordination_strategy"],
                "participating_organism_ids": params["participating_organism_ids"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks/${encodeURIComponent(params.task_id)}/collective-execution`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_collaboration_system_executeCollectiveTask>
        }

        /**
         * Monitors and maintains the health of the AI organism ecosystem.
         */
        public async getEcosystemHealth(params: RequestType<typeof api_organism_ecosystem_manager_getEcosystemHealth>): Promise<ResponseType<typeof api_organism_ecosystem_manager_getEcosystemHealth>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "include_metrics":         params["include_metrics"] === undefined ? undefined : String(params["include_metrics"]),
                "include_recommendations": params["include_recommendations"] === undefined ? undefined : String(params["include_recommendations"]),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ecosystem/health`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_ecosystem_manager_getEcosystemHealth>
        }

        /**
         * Retrieves messages for a specific organism.
         */
        public async getMessages(params: { organism_id: string }): Promise<ResponseType<typeof api_organism_communicate_getMessages>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/messages`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_communicate_getMessages>
        }

        /**
         * Guides ecosystem-wide evolution based on environmental pressures.
         */
        public async guideEcosystemEvolution(params: RequestType<typeof api_organism_ecosystem_manager_guideEcosystemEvolution>): Promise<ResponseType<typeof api_organism_ecosystem_manager_guideEcosystemEvolution>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ecosystem/evolve`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_ecosystem_manager_guideEcosystemEvolution>
        }

        /**
         * Heals an organism from errors and restores functionality.
         */
        public async heal(params: RequestType<typeof api_organism_heal_heal>): Promise<ResponseType<typeof api_organism_heal_heal>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "error_context":     params["error_context"],
                "recovery_strategy": params["recovery_strategy"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/heal`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_heal_heal>
        }

        /**
         * Indexes new knowledge using RAG 3.0 techniques.
         */
        public async indexKnowledge(params: RequestType<typeof api_organism_rag_system_indexKnowledge>): Promise<ResponseType<typeof api_organism_rag_system_indexKnowledge>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                content:        params.content,
                "content_type": params["content_type"],
                metadata:       params.metadata,
                source:         params.source,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/index-knowledge`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_rag_system_indexKnowledge>
        }

        /**
         * Transfers essential memories and knowledge from parent to child organism.
         */
        public async inheritMemories(params: RequestType<typeof api_organism_memory_inheritance_inheritMemories>): Promise<ResponseType<typeof api_organism_memory_inheritance_inheritMemories>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/inherit-memories`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_memory_inheritance_inheritMemories>
        }

        /**
         * Facilitates collaboration between multiple organisms for complex objectives.
         */
        public async initiateCollaboration(params: RequestType<typeof api_organism_collaboration_system_initiateCollaboration>): Promise<ResponseType<typeof api_organism_collaboration_system_initiateCollaboration>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/collaborate`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_collaboration_system_initiateCollaboration>
        }

        /**
         * Enables organism to learn from codebases, internet, and technologies.
         */
        public async learn(params: RequestType<typeof api_organism_learn_learn>): Promise<ResponseType<typeof api_organism_learn_learn>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "learning_objectives": params["learning_objectives"],
                "source_type":         params["source_type"],
                "source_url":          params["source_url"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/learn`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_learn_learn>
        }

        /**
         * Retrieves all organisms with optional filtering.
         */
        public async list(params: RequestType<typeof api_organism_list_list>): Promise<ResponseType<typeof api_organism_list_list>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                generation: params.generation === undefined ? undefined : String(params.generation),
                limit:      params.limit === undefined ? undefined : String(params.limit),
                status:     params.status === undefined ? undefined : String(params.status),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_list_list>
        }

        /**
         * Retrieves all tasks with optional filtering.
         */
        public async listTasks(): Promise<ResponseType<typeof api_organism_tasks_listTasks>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_tasks_listTasks>
        }

        /**
         * Facilitates collective decision making among organisms.
         */
        public async makeCollectiveDecision(params: RequestType<typeof api_organism_collaboration_endpoints_makeCollectiveDecision>): Promise<ResponseType<typeof api_organism_collaboration_endpoints_makeCollectiveDecision>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/collective-decision`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_collaboration_endpoints_makeCollectiveDecision>
        }

        /**
         * Merges multiple organisms to handle complex tasks.
         */
        public async merge(params: RequestType<typeof api_organism_merge_merge>): Promise<ResponseType<typeof api_organism_merge_merge>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/merge`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_merge_merge>
        }

        /**
         * Enables organism to operate computer systems autonomously.
         */
        public async operateComputer(params: RequestType<typeof api_organism_autonomous_controller_operateComputer>): Promise<ResponseType<typeof api_organism_autonomous_controller_operateComputer>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "operation_details":  params["operation_details"],
                "operation_type":     params["operation_type"],
                "safety_constraints": params["safety_constraints"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/computer-operation`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_autonomous_controller_operateComputer>
        }

        /**
         * Optimizes the ecosystem for better performance and resource utilization.
         */
        public async optimizeEcosystem(params: RequestType<typeof api_organism_ecosystem_manager_optimizeEcosystem>): Promise<ResponseType<typeof api_organism_ecosystem_manager_optimizeEcosystem>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ecosystem/optimize`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_ecosystem_manager_optimizeEcosystem>
        }

        /**
         * Optimizes memory structure and access patterns for better performance.
         */
        public async optimizeMemoryStructure(params: RequestType<typeof api_organism_memory_manager_optimizeMemoryStructure>): Promise<ResponseType<typeof api_organism_memory_manager_optimizeMemoryStructure>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                constraints:          params.constraints,
                "optimization_goals": params["optimization_goals"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/optimize-memory`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_memory_manager_optimizeMemoryStructure>
        }

        /**
         * Optimizes organism performance based on specific targets.
         */
        public async optimizePerformance(params: RequestType<typeof api_organism_upgrade_system_optimizePerformance>): Promise<ResponseType<typeof api_organism_upgrade_system_optimizePerformance>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                constraints:           params.constraints,
                "optimization_target": params["optimization_target"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/optimize`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_upgrade_system_optimizePerformance>
        }

        /**
         * Enables organisms to learn from each other through peer collaboration.
         */
        public async peerLearning(params: RequestType<typeof api_organism_learning_system_peerLearning>): Promise<ResponseType<typeof api_organism_learning_system_peerLearning>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/peer-learning`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_learning_system_peerLearning>
        }

        /**
         * Persists organism memories across sessions with different retention levels.
         */
        public async persistMemories(params: RequestType<typeof api_organism_memory_manager_persistMemories>): Promise<ResponseType<typeof api_organism_memory_manager_persistMemories>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "backup_location":   params["backup_location"],
                "persistence_level": params["persistence_level"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/persist-memories`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_memory_manager_persistMemories>
        }

        /**
         * Builds and queries knowledge graphs for complex reasoning.
         */
        public async queryKnowledgeGraph(params: RequestType<typeof api_organism_rag_system_queryKnowledgeGraph>): Promise<ResponseType<typeof api_organism_rag_system_queryKnowledgeGraph>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                concept:              params.concept,
                depth:                params.depth,
                "relationship_types": params["relationship_types"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/knowledge-graph`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_rag_system_queryKnowledgeGraph>
        }

        /**
         * Performs RAG 3.0 enhanced queries with contextual knowledge retrieval.
         */
        public async ragQuery(params: RequestType<typeof api_organism_rag_system_ragQuery>): Promise<ResponseType<typeof api_organism_rag_system_ragQuery>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "confidence_threshold": params["confidence_threshold"],
                "context_limit":        params["context_limit"],
                "knowledge_types":      params["knowledge_types"],
                query:                  params.query,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/rag-query`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_rag_system_ragQuery>
        }

        /**
         * Restores organism memories from persistent storage.
         */
        public async restoreMemories(params: RequestType<typeof api_organism_memory_manager_restoreMemories>): Promise<ResponseType<typeof api_organism_memory_manager_restoreMemories>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "persistence_id":    params["persistence_id"],
                "restore_point":     params["restore_point"],
                "selective_restore": params["selective_restore"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/restore-memories`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_memory_manager_restoreMemories>
        }

        /**
         * Enables organism to self-replicate with improvements.
         */
        public async selfReplicate(params: RequestType<typeof api_organism_autonomous_controller_selfReplicate>): Promise<ResponseType<typeof api_organism_autonomous_controller_selfReplicate>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "replication_purpose": params["replication_purpose"],
                "resource_allocation": params["resource_allocation"],
                "target_improvements": params["target_improvements"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/replicate`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_autonomous_controller_selfReplicate>
        }

        /**
         * Performs advanced semantic search across organism's knowledge base.
         */
        public async semanticSearch(params: RequestType<typeof api_organism_rag_system_semanticSearch>): Promise<ResponseType<typeof api_organism_rag_system_semanticSearch>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "max_results":  params["max_results"],
                "search_query": params["search_query"],
                "search_type":  params["search_type"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/semantic-search`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_rag_system_semanticSearch>
        }

        /**
         * Sends a message between organisms or broadcasts to all.
         */
        public async sendMessage(params: RequestType<typeof api_organism_communicate_sendMessage>): Promise<ResponseType<typeof api_organism_communicate_sendMessage>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/communications`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_communicate_sendMessage>
        }

        /**
         * Implements swarm intelligence for collective problem-solving.
         */
        public async swarmIntelligence(params: RequestType<typeof api_organism_collaboration_system_swarmIntelligence>): Promise<ResponseType<typeof api_organism_collaboration_system_swarmIntelligence>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/swarm-intelligence`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_collaboration_system_swarmIntelligence>
        }

        /**
         * Creates collective memory from multiple organisms.
         */
        public async synthesizeCollectiveMemory(params: RequestType<typeof api_organism_memory_inheritance_synthesizeCollectiveMemory>): Promise<ResponseType<typeof api_organism_memory_inheritance_synthesizeCollectiveMemory>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/collective-memory`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_memory_inheritance_synthesizeCollectiveMemory>
        }

        /**
         * Transfers knowledge between organisms with intelligent filtering.
         */
        public async transferKnowledge(params: RequestType<typeof api_organism_memory_manager_transferKnowledge>): Promise<ResponseType<typeof api_organism_memory_manager_transferKnowledge>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/transfer-knowledge`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_memory_manager_transferKnowledge>
        }

        /**
         * Updates task progress and handles completion.
         */
        public async updateTaskProgress(params: RequestType<typeof api_organism_tasks_updateTaskProgress>): Promise<ResponseType<typeof api_organism_tasks_updateTaskProgress>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "progress_update": params["progress_update"],
                "results_update":  params["results_update"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks/${encodeURIComponent(params.task_id)}/progress`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_tasks_updateTaskProgress>
        }

        /**
         * Enables organisms to upgrade themselves safely and efficiently.
         */
        public async upgradeOrganism(params: RequestType<typeof api_organism_upgrade_system_upgradeOrganism>): Promise<ResponseType<typeof api_organism_upgrade_system_upgradeOrganism>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "target_metrics": params["target_metrics"],
                "upgrade_source": params["upgrade_source"],
                "upgrade_type":   params["upgrade_type"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/upgrade`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_upgrade_system_upgradeOrganism>
        }

        /**
         * Validates proposed changes for safety before implementation.
         */
        public async validateSafety(params: RequestType<typeof api_organism_upgrade_system_validateSafety>): Promise<ResponseType<typeof api_organism_upgrade_system_validateSafety>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "proposed_changes": params["proposed_changes"],
                "validation_level": params["validation_level"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/organisms/${encodeURIComponent(params.organism_id)}/validate-safety`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_organism_upgrade_system_validateSafety>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.48.13)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
